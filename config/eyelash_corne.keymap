#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        HMR: HMR {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44 45 46 47>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };

        HML: HML {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <7 8 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 46 47 45 42 43 44>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };

        caps_word_mo: caps_word_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_WORD_MO";
            bindings = <&mo>, <&caps_word>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
        };

        nums_word_mo: nums_word_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "NUMS_WORD_MO";
            bindings = <&mo>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        caps_word_hml {
            bindings = <&caps_word>;
            key-positions = <15 16>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        assign {
            bindings = <&kp EQUAL>;
            key-positions = <16 17>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        lt {
            bindings = <&kp LESS_THAN>;
            key-positions = <2 3>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        gt {
            bindings = <&kp GREATER_THAN>;
            key-positions = <3 4>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        l_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <8 9>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        r_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <9 10>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        l_paren {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <23 24>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        r_paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <24 25>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        l_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <37 38>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        r_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <38 39>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        excla {
            bindings = <&kp EXCLAMATION>;
            key-positions = <14 15>;
            layers = <0>;
        };

        go_assign {
            bindings = <&go_assign>;
            key-positions = <7 8>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };
    };

    macros {
        go_assign: go_assign {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RS(SEMICOLON) &kp EQUAL>;
            label = "GO_ASSIGN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESCAPE     &kp Q            &kp W            &kp E              &kp R                    &lt 1 T                              &kp UP                &kp Y        &kp U                 &kp I                   &kp O                  &kp P                 &kp BACKSLASH
&kp TAB        &lt 2 A          &kp S            &kp D              &kp F                    &kp G                      &kp LEFT  &kp ENTER  &kp RIGHT  &kp H        &kp J                 &kp K                   &kp L                  &lt 2 SEMICOLON       &kp SQT
&kp BACKSPACE  &HML LEFT_GUI Z  &HML LEFT_ALT X  &HML LEFT_SHIFT C  &HML LCTRL V             &lt 4 B      &kp C_MUTE              &kp DOWN              &kp N        &HMR RIGHT_CONTROL M  &HMR RIGHT_SHIFT COMMA  &HMR RIGHT_ALT PERIOD  &HMR RIGHT_GUI SLASH  &kp DELETE
                                                 &caps_word_mo 5 0  &mt LEFT_GUI UNDERSCORE  &lt 3 ENTER                                                &lt 2 ENTER  &kp SPACE             &nums_word_mo 5 0
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        number {
            bindings = <
&none   &none  &none  &none  &none  &none                    &trans          &none   &kp KP_N7        &kp KP_N8  &kp KP_N9  &kp KP_PLUS   &kp KP_SLASH
&none   &none  &none  &none  &none  &none            &trans  &trans  &trans  &none   &kp KP_N4        &kp KP_N5  &kp KP_N6  &kp KP_MINUS  &kp KP_MULTIPLY
&trans  &none  &none  &none  &none  &none  &trans            &trans          &none   &kp KP_N1        &kp KP_N2  &kp KP_N3  &kp KP_DOT    &kp KP_ENTER
                      &none  &none  &none                                    &trans  &kp KP_NUMBER_0  &none
            >;

            label = "NUMBER";
        };

        symbol {
            bindings = <
&trans  &none            &kp LESS_THAN  &kp GREATER_THAN  &kp BACKSLASH  &kp GRAVE                    &trans          &kp AMPS   &go_assign  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &none         &none
&trans  &kp EXCLAMATION  &kp MINUS      &kp PLUS          &kp EQUAL      &kp POUND            &trans  &trans  &trans  &kp PIPE   &kp COLON   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PERCENT   &none
&trans  &kp AT           &kp UNDER      &kp ASTRK         &kp CARET      &kp SLASH  &trans            &trans          &kp TILDE  &kp DLLR    &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp QUESTION  &trans
                                        &none             &trans         &kp SPACE                                    &trans     &trans      &none
            >;

            label = "SYMBOL";
            sensor-bindings = <&scroll_encoder>;
        };

        win {
            bindings = <
&trans  &kp LS(LC(LG(NUMBER_3)))  &kp LA(LC(LEFT))  &kp LC(LA(RIGHT))  &kp LC(LG(LS(NUMBER_4)))  &kp LA(LC(LG(RIGHT)))                    &trans         &kp PAGE_UP   &kp HOME        &kp END       &kp PAGE_DOWN  &none  &none
&none   &kp LA(LC(D))             &kp LA(LC(F))     &kp LA(LC(T))      &kp LA(LC(G))             &kp LA(LC(ENTER))                &trans  &trans  &none  &kp LEFT      &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT      &none  &none
&none   &kp C_MUTE                &kp C_PREV        &kp C_PLAY_PAUSE   &kp C_NEXT                &none                  &trans            &trans         &kp RC(LEFT)  &none           &none         &kp LC(RIGHT)  &none  &kp C_SLEEP
                                                    &none              &none                     &none                                                   &none         &none           &none
            >;

            label = "WIN";
            sensor-bindings = <&scroll_encoder>;
        };

        function {
            bindings = <
&none  &none  &none  &none  &none  &none                  &none         &kp F10  &kp F7  &kp F8  &kp F9  &none  &none
&none  &none  &none  &none  &none  &none           &none  &none  &none  &kp F11  &kp F4  &kp F5  &kp F6  &none  &none
&none  &none  &none  &none  &none  &none  &none           &none         &kp F12  &kp F1  &kp F2  &kp F3  &none  &none
                     &none  &none  &none                                &none    &none   &none
            >;

            label = "FN";
        };

        kbd_ctl {
            display-name = "KBD";
            bindings = <
&studio_unlock  &none            &none           &none         &bt BT_CLR    &bt BT_CLR_ALL                             &mmv MOVE_UP                     &none            &none            &none            &none            &none  &none
&sys_reset      &bt BT_SEL 0     &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4               &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &none            &none            &none            &none            &none  &sys_reset
&bootloader     &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &out OUT_USB  &out OUT_BLE  &rgb_ug RGB_EFF  &trans                    &mmv MOVE_DOWN                   &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &none  &bootloader
                                                 &trans        &none         &none                                                                       &none            &none            &trans
            >;

            sensor-bindings = <&rgb_encoder>;
            label = "KBD";
        };
    };
};
