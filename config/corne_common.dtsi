#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        HMR: HMR {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };

        HML: HML {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };

        caps_word_mo: caps_word_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_WORD_MO";
            bindings = <&mo>, <&caps_word>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
        };

        nums_word_mo: nums_word_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "NUMS_WORD_MO";
            bindings = <&mo>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };

        tp: tp {
            compatible = "zmk,behavior-hold-tap";
            label = "tap_preferred";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <150>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        caps_word_hml {
            bindings = <&caps_word>;
            key-positions = <15 16>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        assign {
            bindings = <&kp EQUAL>;
            key-positions = <16 17>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        lt {
            bindings = <&kp LESS_THAN>;
            key-positions = <2 3>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        gt {
            bindings = <&kp GREATER_THAN>;
            key-positions = <3 4>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        l_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <8 9>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        r_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <9 10>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        l_paren {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <23 24>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        r_paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <24 25>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        l_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <37 38>;
            layers = <0>;
            require-prior-idle-ms = <75>;
        };

        r_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <38 39>;
            require-prior-idle-ms = <75>;
            layers = <0>;
        };

        windows {
            bindings = <&to 6>;
            key-positions = <2 3 4>;
            layers = <0>;
        };

        mac {
            bindings = <&to 0>;
            key-positions = <2 3 4>;
            layers = <6>;
        };
    };

    macros {
        go_assign: go_assign {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RS(SEMICOLON) &kp EQUAL>;
            label = "GO_ASSIGN";
        };
    };
};
